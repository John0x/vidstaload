/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@ionic/core';
import 'ionicons';


declare global {

  namespace StencilComponents {
    interface AppAbout {

    }
  }

  interface HTMLAppAboutElement extends StencilComponents.AppAbout, HTMLStencilElement {}

  var HTMLAppAboutElement: {
    prototype: HTMLAppAboutElement;
    new (): HTMLAppAboutElement;
  };
  interface HTMLElementTagNameMap {
    'app-about': HTMLAppAboutElement;
  }
  interface ElementTagNameMap {
    'app-about': HTMLAppAboutElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-about': JSXElements.AppAboutAttributes;
    }
  }
  namespace JSXElements {
    export interface AppAboutAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppHome {
      'searchTerm': string;
    }
  }

  interface HTMLAppHomeElement extends StencilComponents.AppHome, HTMLStencilElement {}

  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {
      'searchTerm'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppRoot {

    }
  }

  interface HTMLAppRootElement extends StencilComponents.AppRoot, HTMLStencilElement {}

  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };
  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement;
  }
  interface ElementTagNameMap {
    'app-root': HTMLAppRootElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-root': JSXElements.AppRootAttributes;
    }
  }
  namespace JSXElements {
    export interface AppRootAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface InstaButton {

    }
  }

  interface HTMLInstaButtonElement extends StencilComponents.InstaButton, HTMLStencilElement {}

  var HTMLInstaButtonElement: {
    prototype: HTMLInstaButtonElement;
    new (): HTMLInstaButtonElement;
  };
  interface HTMLElementTagNameMap {
    'insta-button': HTMLInstaButtonElement;
  }
  interface ElementTagNameMap {
    'insta-button': HTMLInstaButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'insta-button': JSXElements.InstaButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface InstaButtonAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface InstaSearchbar {
      'placeholder': string;
    }
  }

  interface HTMLInstaSearchbarElement extends StencilComponents.InstaSearchbar, HTMLStencilElement {}

  var HTMLInstaSearchbarElement: {
    prototype: HTMLInstaSearchbarElement;
    new (): HTMLInstaSearchbarElement;
  };
  interface HTMLElementTagNameMap {
    'insta-searchbar': HTMLInstaSearchbarElement;
  }
  interface ElementTagNameMap {
    'insta-searchbar': HTMLInstaSearchbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'insta-searchbar': JSXElements.InstaSearchbarAttributes;
    }
  }
  namespace JSXElements {
    export interface InstaSearchbarAttributes extends HTMLAttributes {
      'onChange'?: (event: CustomEvent<string>) => void;
      'onPressedEnter'?: (event: CustomEvent<string>) => void;
      'placeholder'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
